// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: implantpb.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义发送请求信息
type ImplantRequestCommandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	ImplantId   string `protobuf:"bytes,1,opt,name=implant_id,json=implantId,proto3" json:"implant_id,omitempty"`
	ClientId    string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CommandInfo string `protobuf:"bytes,3,opt,name=command_info,json=commandInfo,proto3" json:"command_info,omitempty"`
}

func (x *ImplantRequestCommandInfo) Reset() {
	*x = ImplantRequestCommandInfo{}
	mi := &file_implantpb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantRequestCommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantRequestCommandInfo) ProtoMessage() {}

func (x *ImplantRequestCommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_implantpb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantRequestCommandInfo.ProtoReflect.Descriptor instead.
func (*ImplantRequestCommandInfo) Descriptor() ([]byte, []int) {
	return file_implantpb_proto_rawDescGZIP(), []int{0}
}

func (x *ImplantRequestCommandInfo) GetImplantId() string {
	if x != nil {
		return x.ImplantId
	}
	return ""
}

func (x *ImplantRequestCommandInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ImplantRequestCommandInfo) GetCommandInfo() string {
	if x != nil {
		return x.CommandInfo
	}
	return ""
}

// 定义发送请求信息
type ImplantRunCommandResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	ImplantId            string `protobuf:"bytes,1,opt,name=implant_id,json=implantId,proto3" json:"implant_id,omitempty"`
	ClientId             string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CommandRunResultInfo string `protobuf:"bytes,3,opt,name=command_run_result_info,json=commandRunResultInfo,proto3" json:"command_run_result_info,omitempty"`
}

func (x *ImplantRunCommandResultInfo) Reset() {
	*x = ImplantRunCommandResultInfo{}
	mi := &file_implantpb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantRunCommandResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantRunCommandResultInfo) ProtoMessage() {}

func (x *ImplantRunCommandResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_implantpb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantRunCommandResultInfo.ProtoReflect.Descriptor instead.
func (*ImplantRunCommandResultInfo) Descriptor() ([]byte, []int) {
	return file_implantpb_proto_rawDescGZIP(), []int{1}
}

func (x *ImplantRunCommandResultInfo) GetImplantId() string {
	if x != nil {
		return x.ImplantId
	}
	return ""
}

func (x *ImplantRunCommandResultInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ImplantRunCommandResultInfo) GetCommandRunResultInfo() string {
	if x != nil {
		return x.CommandRunResultInfo
	}
	return ""
}

// 定义发送请求信息
type ImplantRecvResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	// string client_id = 1;
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ImplantRecvResultInfo) Reset() {
	*x = ImplantRecvResultInfo{}
	mi := &file_implantpb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplantRecvResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantRecvResultInfo) ProtoMessage() {}

func (x *ImplantRecvResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_implantpb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantRecvResultInfo.ProtoReflect.Descriptor instead.
func (*ImplantRecvResultInfo) Descriptor() ([]byte, []int) {
	return file_implantpb_proto_rawDescGZIP(), []int{2}
}

func (x *ImplantRecvResultInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_implantpb_proto protoreflect.FileDescriptor

var file_implantpb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x22, 0x7a, 0x0a, 0x19,
	0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x49, 0x6d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x15, 0x49,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xed, 0x01, 0x0a,
	0x0e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6e, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x6b, 0x0a, 0x1f, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0x5a, 0x01,
	0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_implantpb_proto_rawDescOnce sync.Once
	file_implantpb_proto_rawDescData = file_implantpb_proto_rawDesc
)

func file_implantpb_proto_rawDescGZIP() []byte {
	file_implantpb_proto_rawDescOnce.Do(func() {
		file_implantpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_implantpb_proto_rawDescData)
	})
	return file_implantpb_proto_rawDescData
}

var file_implantpb_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_implantpb_proto_goTypes = []any{
	(*ImplantRequestCommandInfo)(nil),   // 0: implantpb.ImplantRequestCommandInfo
	(*ImplantRunCommandResultInfo)(nil), // 1: implantpb.ImplantRunCommandResultInfo
	(*ImplantRecvResultInfo)(nil),       // 2: implantpb.ImplantRecvResultInfo
}
var file_implantpb_proto_depIdxs = []int32{
	0, // 0: implantpb.ImplantService.ImplantRequestCommandService:input_type -> implantpb.ImplantRequestCommandInfo
	1, // 1: implantpb.ImplantService.ImplantSendCommandResultService:input_type -> implantpb.ImplantRunCommandResultInfo
	0, // 2: implantpb.ImplantService.ImplantRequestCommandService:output_type -> implantpb.ImplantRequestCommandInfo
	2, // 3: implantpb.ImplantService.ImplantSendCommandResultService:output_type -> implantpb.ImplantRecvResultInfo
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_implantpb_proto_init() }
func file_implantpb_proto_init() {
	if File_implantpb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_implantpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_implantpb_proto_goTypes,
		DependencyIndexes: file_implantpb_proto_depIdxs,
		MessageInfos:      file_implantpb_proto_msgTypes,
	}.Build()
	File_implantpb_proto = out.File
	file_implantpb_proto_rawDesc = nil
	file_implantpb_proto_goTypes = nil
	file_implantpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImplantServiceClient is the client API for ImplantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImplantServiceClient interface {
	ImplantRequestCommandService(ctx context.Context, opts ...grpc.CallOption) (ImplantService_ImplantRequestCommandServiceClient, error)
	ImplantSendCommandResultService(ctx context.Context, in *ImplantRunCommandResultInfo, opts ...grpc.CallOption) (*ImplantRecvResultInfo, error)
}

type implantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImplantServiceClient(cc grpc.ClientConnInterface) ImplantServiceClient {
	return &implantServiceClient{cc}
}

func (c *implantServiceClient) ImplantRequestCommandService(ctx context.Context, opts ...grpc.CallOption) (ImplantService_ImplantRequestCommandServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImplantService_serviceDesc.Streams[0], "/implantpb.ImplantService/ImplantRequestCommandService", opts...)
	if err != nil {
		return nil, err
	}
	x := &implantServiceImplantRequestCommandServiceClient{stream}
	return x, nil
}

type ImplantService_ImplantRequestCommandServiceClient interface {
	Send(*ImplantRequestCommandInfo) error
	Recv() (*ImplantRequestCommandInfo, error)
	grpc.ClientStream
}

type implantServiceImplantRequestCommandServiceClient struct {
	grpc.ClientStream
}

func (x *implantServiceImplantRequestCommandServiceClient) Send(m *ImplantRequestCommandInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *implantServiceImplantRequestCommandServiceClient) Recv() (*ImplantRequestCommandInfo, error) {
	m := new(ImplantRequestCommandInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *implantServiceClient) ImplantSendCommandResultService(ctx context.Context, in *ImplantRunCommandResultInfo, opts ...grpc.CallOption) (*ImplantRecvResultInfo, error) {
	out := new(ImplantRecvResultInfo)
	err := c.cc.Invoke(ctx, "/implantpb.ImplantService/ImplantSendCommandResultService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImplantServiceServer is the server API for ImplantService service.
type ImplantServiceServer interface {
	ImplantRequestCommandService(ImplantService_ImplantRequestCommandServiceServer) error
	ImplantSendCommandResultService(context.Context, *ImplantRunCommandResultInfo) (*ImplantRecvResultInfo, error)
}

// UnimplementedImplantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImplantServiceServer struct {
}

func (*UnimplementedImplantServiceServer) ImplantRequestCommandService(ImplantService_ImplantRequestCommandServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ImplantRequestCommandService not implemented")
}
func (*UnimplementedImplantServiceServer) ImplantSendCommandResultService(context.Context, *ImplantRunCommandResultInfo) (*ImplantRecvResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantSendCommandResultService not implemented")
}

func RegisterImplantServiceServer(s *grpc.Server, srv ImplantServiceServer) {
	s.RegisterService(&_ImplantService_serviceDesc, srv)
}

func _ImplantService_ImplantRequestCommandService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImplantServiceServer).ImplantRequestCommandService(&implantServiceImplantRequestCommandServiceServer{stream})
}

type ImplantService_ImplantRequestCommandServiceServer interface {
	Send(*ImplantRequestCommandInfo) error
	Recv() (*ImplantRequestCommandInfo, error)
	grpc.ServerStream
}

type implantServiceImplantRequestCommandServiceServer struct {
	grpc.ServerStream
}

func (x *implantServiceImplantRequestCommandServiceServer) Send(m *ImplantRequestCommandInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *implantServiceImplantRequestCommandServiceServer) Recv() (*ImplantRequestCommandInfo, error) {
	m := new(ImplantRequestCommandInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImplantService_ImplantSendCommandResultService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImplantRunCommandResultInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplantServiceServer).ImplantSendCommandResultService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/implantpb.ImplantService/ImplantSendCommandResultService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplantServiceServer).ImplantSendCommandResultService(ctx, req.(*ImplantRunCommandResultInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImplantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "implantpb.ImplantService",
	HandlerType: (*ImplantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImplantSendCommandResultService",
			Handler:    _ImplantService_ImplantSendCommandResultService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImplantRequestCommandService",
			Handler:       _ImplantService_ImplantRequestCommandService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "implantpb.proto",
}
