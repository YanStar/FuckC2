// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: clientpb.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义发送请求信息
type ClientSendCommandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	ClientId    string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CommandInfo string `protobuf:"bytes,2,opt,name=command_info,json=commandInfo,proto3" json:"command_info,omitempty"`
}

func (x *ClientSendCommandInfo) Reset() {
	*x = ClientSendCommandInfo{}
	mi := &file_clientpb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientSendCommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSendCommandInfo) ProtoMessage() {}

func (x *ClientSendCommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSendCommandInfo.ProtoReflect.Descriptor instead.
func (*ClientSendCommandInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{0}
}

func (x *ClientSendCommandInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientSendCommandInfo) GetCommandInfo() string {
	if x != nil {
		return x.CommandInfo
	}
	return ""
}

// 定义发送请求信息
type ClientRecvResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	// string client_id = 1;
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ClientRecvResultInfo) Reset() {
	*x = ClientRecvResultInfo{}
	mi := &file_clientpb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRecvResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRecvResultInfo) ProtoMessage() {}

func (x *ClientRecvResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRecvResultInfo.ProtoReflect.Descriptor instead.
func (*ClientRecvResultInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{1}
}

func (x *ClientRecvResultInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type ClientRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *ClientRegister) Reset() {
	*x = ClientRegister{}
	mi := &file_clientpb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegister) ProtoMessage() {}

func (x *ClientRegister) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegister.ProtoReflect.Descriptor instead.
func (*ClientRegister) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{2}
}

func (x *ClientRegister) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// client 发送单个命令
type ClientRequestSingleCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestCommand string `protobuf:"bytes,1,opt,name=request_command,json=requestCommand,proto3" json:"request_command,omitempty"`
}

func (x *ClientRequestSingleCommand) Reset() {
	*x = ClientRequestSingleCommand{}
	mi := &file_clientpb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRequestSingleCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequestSingleCommand) ProtoMessage() {}

func (x *ClientRequestSingleCommand) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequestSingleCommand.ProtoReflect.Descriptor instead.
func (*ClientRequestSingleCommand) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{3}
}

func (x *ClientRequestSingleCommand) GetRequestCommand() string {
	if x != nil {
		return x.RequestCommand
	}
	return ""
}

type HostInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostinfoList []*HostInfo `protobuf:"bytes,1,rep,name=hostinfo_list,json=hostinfoList,proto3" json:"hostinfo_list,omitempty"`
}

func (x *HostInfoListResponse) Reset() {
	*x = HostInfoListResponse{}
	mi := &file_clientpb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfoListResponse) ProtoMessage() {}

func (x *HostInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfoListResponse.ProtoReflect.Descriptor instead.
func (*HostInfoListResponse) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{4}
}

func (x *HostInfoListResponse) GetHostinfoList() []*HostInfo {
	if x != nil {
		return x.HostinfoList
	}
	return nil
}

// HostList 结构体，定义服务返回的数据结构
type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Hostname  string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	ConnPort  string `protobuf:"bytes,4,opt,name=conn_port,json=connPort,proto3" json:"conn_port,omitempty"`
	Os        string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Privilege string `protobuf:"bytes,6,opt,name=privilege,proto3" json:"privilege,omitempty"`
	Version   string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Remarks   string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	mi := &file_clientpb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_clientpb_proto_rawDescGZIP(), []int{5}
}

func (x *HostInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostInfo) GetConnPort() string {
	if x != nil {
		return x.ConnPort
	}
	return ""
}

func (x *HostInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *HostInfo) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

func (x *HostInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HostInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

var File_clientpb_proto protoreflect.FileDescriptor

var file_clientpb_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x14, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x68, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x32,
	0xb5, 0x02, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1e,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x64, 0x0a, 0x21, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientpb_proto_rawDescOnce sync.Once
	file_clientpb_proto_rawDescData = file_clientpb_proto_rawDesc
)

func file_clientpb_proto_rawDescGZIP() []byte {
	file_clientpb_proto_rawDescOnce.Do(func() {
		file_clientpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientpb_proto_rawDescData)
	})
	return file_clientpb_proto_rawDescData
}

var file_clientpb_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_clientpb_proto_goTypes = []any{
	(*ClientSendCommandInfo)(nil),      // 0: clientpb.ClientSendCommandInfo
	(*ClientRecvResultInfo)(nil),       // 1: clientpb.ClientRecvResultInfo
	(*ClientRegister)(nil),             // 2: clientpb.ClientRegister
	(*ClientRequestSingleCommand)(nil), // 3: clientpb.ClientRequestSingleCommand
	(*HostInfoListResponse)(nil),       // 4: clientpb.HostInfoListResponse
	(*HostInfo)(nil),                   // 5: clientpb.HostInfo
}
var file_clientpb_proto_depIdxs = []int32{
	5, // 0: clientpb.HostInfoListResponse.hostinfo_list:type_name -> clientpb.HostInfo
	2, // 1: clientpb.ClientSendServerService.ClientRegisterService:input_type -> clientpb.ClientRegister
	0, // 2: clientpb.ClientSendServerService.ClientSendCommandToImplantService:input_type -> clientpb.ClientSendCommandInfo
	3, // 3: clientpb.ClientSendServerService.ClientRequestHostInfo:input_type -> clientpb.ClientRequestSingleCommand
	1, // 4: clientpb.ClientSendServerService.ClientRegisterService:output_type -> clientpb.ClientRecvResultInfo
	1, // 5: clientpb.ClientSendServerService.ClientSendCommandToImplantService:output_type -> clientpb.ClientRecvResultInfo
	4, // 6: clientpb.ClientSendServerService.ClientRequestHostInfo:output_type -> clientpb.HostInfoListResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_clientpb_proto_init() }
func file_clientpb_proto_init() {
	if File_clientpb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientpb_proto_goTypes,
		DependencyIndexes: file_clientpb_proto_depIdxs,
		MessageInfos:      file_clientpb_proto_msgTypes,
	}.Build()
	File_clientpb_proto = out.File
	file_clientpb_proto_rawDesc = nil
	file_clientpb_proto_goTypes = nil
	file_clientpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientSendServerServiceClient is the client API for ClientSendServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientSendServerServiceClient interface {
	// 客户端注册
	ClientRegisterService(ctx context.Context, opts ...grpc.CallOption) (ClientSendServerService_ClientRegisterServiceClient, error)
	// 客户端发送命令与Implant交互
	ClientSendCommandToImplantService(ctx context.Context, in *ClientSendCommandInfo, opts ...grpc.CallOption) (*ClientRecvResultInfo, error)
	// 客户端发送命令与Server交互：获取host信息
	ClientRequestHostInfo(ctx context.Context, in *ClientRequestSingleCommand, opts ...grpc.CallOption) (*HostInfoListResponse, error)
}

type clientSendServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientSendServerServiceClient(cc grpc.ClientConnInterface) ClientSendServerServiceClient {
	return &clientSendServerServiceClient{cc}
}

func (c *clientSendServerServiceClient) ClientRegisterService(ctx context.Context, opts ...grpc.CallOption) (ClientSendServerService_ClientRegisterServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientSendServerService_serviceDesc.Streams[0], "/clientpb.ClientSendServerService/ClientRegisterService", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientSendServerServiceClientRegisterServiceClient{stream}
	return x, nil
}

type ClientSendServerService_ClientRegisterServiceClient interface {
	Send(*ClientRegister) error
	Recv() (*ClientRecvResultInfo, error)
	grpc.ClientStream
}

type clientSendServerServiceClientRegisterServiceClient struct {
	grpc.ClientStream
}

func (x *clientSendServerServiceClientRegisterServiceClient) Send(m *ClientRegister) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientSendServerServiceClientRegisterServiceClient) Recv() (*ClientRecvResultInfo, error) {
	m := new(ClientRecvResultInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientSendServerServiceClient) ClientSendCommandToImplantService(ctx context.Context, in *ClientSendCommandInfo, opts ...grpc.CallOption) (*ClientRecvResultInfo, error) {
	out := new(ClientRecvResultInfo)
	err := c.cc.Invoke(ctx, "/clientpb.ClientSendServerService/ClientSendCommandToImplantService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientSendServerServiceClient) ClientRequestHostInfo(ctx context.Context, in *ClientRequestSingleCommand, opts ...grpc.CallOption) (*HostInfoListResponse, error) {
	out := new(HostInfoListResponse)
	err := c.cc.Invoke(ctx, "/clientpb.ClientSendServerService/ClientRequestHostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientSendServerServiceServer is the server API for ClientSendServerService service.
type ClientSendServerServiceServer interface {
	// 客户端注册
	ClientRegisterService(ClientSendServerService_ClientRegisterServiceServer) error
	// 客户端发送命令与Implant交互
	ClientSendCommandToImplantService(context.Context, *ClientSendCommandInfo) (*ClientRecvResultInfo, error)
	// 客户端发送命令与Server交互：获取host信息
	ClientRequestHostInfo(context.Context, *ClientRequestSingleCommand) (*HostInfoListResponse, error)
}

// UnimplementedClientSendServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientSendServerServiceServer struct {
}

func (*UnimplementedClientSendServerServiceServer) ClientRegisterService(ClientSendServerService_ClientRegisterServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientRegisterService not implemented")
}
func (*UnimplementedClientSendServerServiceServer) ClientSendCommandToImplantService(context.Context, *ClientSendCommandInfo) (*ClientRecvResultInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSendCommandToImplantService not implemented")
}
func (*UnimplementedClientSendServerServiceServer) ClientRequestHostInfo(context.Context, *ClientRequestSingleCommand) (*HostInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequestHostInfo not implemented")
}

func RegisterClientSendServerServiceServer(s *grpc.Server, srv ClientSendServerServiceServer) {
	s.RegisterService(&_ClientSendServerService_serviceDesc, srv)
}

func _ClientSendServerService_ClientRegisterService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientSendServerServiceServer).ClientRegisterService(&clientSendServerServiceClientRegisterServiceServer{stream})
}

type ClientSendServerService_ClientRegisterServiceServer interface {
	Send(*ClientRecvResultInfo) error
	Recv() (*ClientRegister, error)
	grpc.ServerStream
}

type clientSendServerServiceClientRegisterServiceServer struct {
	grpc.ServerStream
}

func (x *clientSendServerServiceClientRegisterServiceServer) Send(m *ClientRecvResultInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientSendServerServiceClientRegisterServiceServer) Recv() (*ClientRegister, error) {
	m := new(ClientRegister)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClientSendServerService_ClientSendCommandToImplantService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSendCommandInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientSendServerServiceServer).ClientSendCommandToImplantService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientSendServerService/ClientSendCommandToImplantService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientSendServerServiceServer).ClientSendCommandToImplantService(ctx, req.(*ClientSendCommandInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientSendServerService_ClientRequestHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequestSingleCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientSendServerServiceServer).ClientRequestHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientSendServerService/ClientRequestHostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientSendServerServiceServer).ClientRequestHostInfo(ctx, req.(*ClientRequestSingleCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientSendServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientpb.ClientSendServerService",
	HandlerType: (*ClientSendServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientSendCommandToImplantService",
			Handler:    _ClientSendServerService_ClientSendCommandToImplantService_Handler,
		},
		{
			MethodName: "ClientRequestHostInfo",
			Handler:    _ClientSendServerService_ClientRequestHostInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientRegisterService",
			Handler:       _ClientSendServerService_ClientRegisterService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientpb.proto",
}
